defmodule ProjectEuler.Problem2 do
  require Integer
  
  @moduledoc """
  
  # Problem 2: Even Fibonacci numbers
  
  Each new term in the Fibonacci sequence is generated by adding the previous
  two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not 
  exceed four million, find the sum of the even-valued terms.
  
  """
  
  @limit 4_000_000
  
  def solve do
    _solve({0, 1}, 0)
  end

  defp _solve({fib_n_minus_1, _fib_n}, acc)
    when fib_n_minus_1 >= @limit,
    do: acc
    
  defp _solve({fib_n_minus_1, fib_n}, acc) do
    _solve({fib_n, fib_n + fib_n_minus_1}, acc_evens(acc, fib_n))
  end
  
  defp acc_evens(acc, fib) do
    case Integer.even?(fib) do
      true -> acc + fib
      _    -> acc
    end
  end
  
end

{time, solution} = :timer.tc(fn -> ProjectEuler.Problem2.solve end)
IO.puts solution             # 4613732
IO.puts "#{time / 1000} ms"  # 0.005 ms